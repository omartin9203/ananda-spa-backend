# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AccreditedInputType {
  managerId: String
  accreditedDate: DateTime!
  accreditedToEmployee: Boolean!
  employeeId: String
  critical: Boolean
  bonus: Float
  payment: Float
}

type AccreditedType {
  manager: UserInfoDto
  accreditedDate: DateTime
  accreditedToEmployee: Boolean
  employee: UserInfoDto
  critical: Boolean
  bonus: Float
  payment: Float
}

input AccreditedUpdate {
  managerId: String
  accreditedDate: DateTime
  accreditedToEmployee: Boolean
  employeeId: String
  critical: Boolean
}

type AuthDto {
  success: Boolean!
  message: String!
  jwt: String
  id: String
}

type AuthSignUpDto {
  success: Boolean!
  message: String!
  userId: String
  status: String
  roles: [String!]
}

type BaseFormDto implements IBaseFormDto & IResourceDto {
  client: ClientType!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClientFilterInput {
  search: String
}

type ClientRetentionDto {
  name: String!
  phone: String
}

input ClientRetentionInput {
  name: String!
  phone: String
}

input ClientRetentionUpdate {
  name: String
  phone: String
}

type ClientType implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstname: String!
  lastname: String!
  phone: String!
  streetaddress: String!
  city: String!
  state: String!
  zipcode: String!
  email: String!
  datebirth: DateTime
  imgSrc: String
  gender: String
}

type ColorSettingDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  colorId: String!
  name: String!
  hexcode: String!
  available: Boolean
}

input ColorSettingInput {
  colorId: String!
  name: String!
  hexcode: String!
  available: Boolean
}

input ColorSettingUpdate {
  colorId: String
  name: String
  hexcode: String
  available: Boolean
}

input CreateClientInput {
  firstname: String!
  lastname: String!
  phone: String!
  streetaddress: String!
  city: String!
  state: String!
  zipcode: String!
  email: String!
  datebirth: DateTime
  imgSrc: String
  gender: String
}

input CreateDiagnosticInput {
  typeOfKind: String!
  fitzpatrickClassification: String!
  conditionsAndConcerns: [String!]
  texture: String!
  typeOfTreatment: String
  specificClientsConcerns: String
  notesOrRemarks: String
  productsUsedToday: [String!]
  extractions: Boolean
  steam: Boolean
  highFrecuency: Boolean
  todaysRecommendedProducts: RecommendedProductInput
}

input CreateFacialFormInput {
  clientId: String!
  recommendation: String
  groupon: String
  business: String
  businessYelp: Boolean
  businessGoogle: Boolean
  businessGroupon: Boolean
  businessClasspass: Boolean
  businessFacebook: Boolean
  businessRecommendation: Boolean
  wearcontact: Boolean
  surgery: Boolean
  surgerydescribe: String
  skincancer: Boolean
  dermatitis: Boolean
  keloidscarring: Boolean
  acne: Boolean
  rosacea: Boolean
  broken: Boolean
  treatment: Boolean
  hypo: Boolean
  hyperpig: Boolean
  burns: Boolean
  anycondition: Boolean
  anyconditiondescription: String
  allergies: Boolean
  latexallergies: Boolean
  otherallergies: Boolean
  otherallergiesdescription: String
  prescription: Boolean
  prescriptiondescription: String
  pregnant: Boolean
  technician: Boolean
  techniciandescription: String
  appointment: String
  oftenfacials: String
  oftenbody: String
  cosmetic: Boolean
  finelines: Boolean
  wrinkles: Boolean
  dull: Boolean
  loss: Boolean
  dry: Boolean
  oily: Boolean
  pores: Boolean
  redness: Boolean
  sensit: Boolean
  dark: Boolean
  pimples: Boolean
  skin: Boolean
  other: Boolean
  otherextradescription: String
  routine: String
  cleanser: Boolean
  toner: Boolean
  moisturizer: Boolean
  spf: Boolean
  vitamin: Boolean
  scrubs: Boolean
  speciality: Boolean
  mask: Boolean
  supplements: Boolean
  exercise: Boolean
  scar: Boolean
  skinsensitive: Boolean
  pictures: Boolean
  consent: Float
  signature: String
  parentsConsent: ParentConsentInput
}

input CreateMassageFormInput {
  clientId: String!
  occupation: String
  emergencyname: String
  emergencyphone: String
  havepro: Boolean
  howofter: String
  difficulty: Boolean
  qtTwoExplain: String
  allergies: Boolean
  qtThreeExplain: String
  sensitive: Boolean
  contactlenses: Boolean
  dentures: Boolean
  hearing: Boolean
  workstation: Boolean
  qtSixExplain: String
  repetitive: Boolean
  qtSevenExplain: String
  experience: Boolean
  muscle: Boolean
  anxiety: Boolean
  insomnia: Boolean
  irritability: Boolean
  other: String
  particular: Boolean
  qtNigthExplain: String
  goals: Boolean
  qtTenExplain: String
  arms: Boolean
  legs: Boolean
  feet: Boolean
  shoulder: Boolean
  hip: Boolean
  uperback: Boolean
  lowerback: Boolean
  calves: Boolean
  medical: Boolean
  qtElevenExplain: String
  chiropractor: Boolean
  qtTweleExplain: String
  medication: Boolean
  qtTreceExplain: String
  contContagious: Boolean
  contSores: Boolean
  contBruising: Boolean
  accident: Boolean
  fracture: Boolean
  surgery: Boolean
  artificial: Boolean
  sprains: Boolean
  fever: Boolean
  swollen: Boolean
  sensitivity: Boolean
  heart: Boolean
  blood: Boolean
  circulatory: Boolean
  varicose: Boolean
  rheumatoid: Boolean
  atherosclerosis: Boolean
  phlebitis: Boolean
  thrombosis: Boolean
  osteoporosis: Boolean
  epilepsy: Boolean
  migraines: Boolean
  cancer: Boolean
  diabetes: Boolean
  sensation: Boolean
  neck: Boolean
  fibromyalgia: Boolean
  tmj: Boolean
  carpal: Boolean
  tennis: Boolean
  pregnancy: Boolean
  manymonth: String
  conditionexplain: String
  anything: String
  signature: String
  datecreated: DateTime
  dateinitial: String
  parentsConsent: ParentConsentInput
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  imgSrc: String!
  streetAddress: String!
  city: String!
  state: String!
  zipCode: String!
  dateOfBirth: DateTime!
  gender: String!
  colorId: String
}

input CreateVisit {
  clientId: String!
  performedById: String!
  date: DateTime
  photos: [String!]
  notes: [NoteInput!]
  diagnostic: CreateDiagnosticInput
  formId: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DiagnosticDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: ClientType
  performedBy: UserType
  date: DateTime
  typeOfKind: String
  fitzpatrickClassification: String
  conditionsAndConcerns: [String!]
  texture: String
  typeOfTreatment: String
  specificClientsConcerns: String
  notesOrRemarks: String
  productsUsedToday: [String!]
  extractions: Boolean
  steam: Boolean
  highFrecuency: Boolean
  todaysRecommendedProducts: RecommendedProductType
}

type FacialFormType implements IBaseFormDto & IResourceDto {
  client: ClientType!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  recommendation: String
  groupon: String
  business: String
  businessYelp: Boolean
  businessGoogle: Boolean
  businessGroupon: Boolean
  businessClasspass: Boolean
  businessFacebook: Boolean
  businessRecommendation: Boolean
  wearcontact: Boolean
  surgery: Boolean
  surgerydescribe: String
  skincancer: Boolean
  dermatitis: Boolean
  keloidscarring: Boolean
  acne: Boolean
  rosacea: Boolean
  broken: Boolean
  treatment: Boolean
  hypo: Boolean
  hyperpig: Boolean
  burns: Boolean
  anycondition: Boolean
  anyconditiondescription: String
  allergies: Boolean
  latexallergies: Boolean
  otherallergies: Boolean
  otherallergiesdescription: String
  prescription: Boolean
  prescriptiondescription: String
  pregnant: Boolean
  technician: Boolean
  techniciandescription: String
  appointment: String
  oftenfacials: String
  oftenbody: String
  cosmetic: Boolean
  finelines: Boolean
  wrinkles: Boolean
  dull: Boolean
  loss: Boolean
  dry: Boolean
  oily: Boolean
  pores: Boolean
  redness: Boolean
  sensit: Boolean
  dark: Boolean
  pimples: Boolean
  skin: Boolean
  other: Boolean
  otherextradescription: String
  routine: String
  cleanser: Boolean
  toner: Boolean
  moisturizer: Boolean
  spf: Boolean
  vitamin: Boolean
  scrubs: Boolean
  speciality: Boolean
  mask: Boolean
  supplements: Boolean
  exercise: Boolean
  scar: Boolean
  skinsensitive: Boolean
  pictures: Boolean
  consent: Float
  signature: String
  parentsConsent: ParentConsentType
}

input FeedbackInputType {
  extractions: String!
  rating: Float!
  clientId: String!
  facialistId: String!
}

interface IBaseFormDto {
  client: ClientType
}

interface IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LoginInput {
  email: String
  password: String
  tokenId: String
  provider: String = "local"
}

type MassageFormType implements IBaseFormDto & IResourceDto {
  client: ClientType!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  occupation: String
  emergencyname: String
  emergencyphone: String
  havepro: Boolean
  howofter: String
  difficulty: Boolean
  qtTwoExplain: String
  allergies: Boolean
  qtThreeExplain: String
  sensitive: Boolean
  contactlenses: Boolean
  dentures: Boolean
  hearing: Boolean
  workstation: Boolean
  qtSixExplain: String
  repetitive: Boolean
  qtSevenExplain: String
  experience: Boolean
  muscle: Boolean
  anxiety: Boolean
  insomnia: Boolean
  irritability: Boolean
  other: String
  particular: Boolean
  qtNigthExplain: String
  goals: Boolean
  qtTenExplain: String
  arms: Boolean
  legs: Boolean
  feet: Boolean
  shoulder: Boolean
  hip: Boolean
  uperback: Boolean
  lowerback: Boolean
  calves: Boolean
  medical: Boolean
  qtElevenExplain: String
  chiropractor: Boolean
  qtTweleExplain: String
  medication: Boolean
  qtTreceExplain: String
  contContagious: Boolean
  contSores: Boolean
  contBruising: Boolean
  accident: Boolean
  fracture: Boolean
  surgery: Boolean
  artificial: Boolean
  sprains: Boolean
  fever: Boolean
  swollen: Boolean
  sensitivity: Boolean
  heart: Boolean
  blood: Boolean
  circulatory: Boolean
  varicose: Boolean
  rheumatoid: Boolean
  atherosclerosis: Boolean
  phlebitis: Boolean
  thrombosis: Boolean
  osteoporosis: Boolean
  epilepsy: Boolean
  migraines: Boolean
  cancer: Boolean
  diabetes: Boolean
  sensation: Boolean
  neck: Boolean
  fibromyalgia: Boolean
  tmj: Boolean
  carpal: Boolean
  tennis: Boolean
  pregnancy: Boolean
  manymonth: String
  conditionexplain: String
  anything: String
  signature: String
  datecreated: DateTime
  dateinitial: String
  parentsConsent: ParentConsentType
}

type Mutation {
  createClient(input: CreateClientInput!): ClientType
  updateClient(input: UpdateClientInput!, id: ID!): ClientType
  deleteClient(id: ID!): ClientType
  createUser(input: CreateUserInput!): UserType
  updateUser(input: UpdateUserInput!, id: ID!): UserType
  deleteUser(id: ID!): UserType
  createFacial(input: CreateFacialFormInput!): FacialFormType
  deleteFacial(id: ID!): FacialFormType
  updateFacial(input: UpdateFacialFormInput!, id: ID!): FacialFormType
  createMassage(input: CreateMassageFormInput!): MassageFormType
  deleteMassage(id: ID!): MassageFormType
  updateMassage(input: UpdateMassageFormInput!, id: ID!): MassageFormType
  createDiagnostic(input: CreateDiagnosticInput!): DiagnosticDto
  updateDiagnostic(input: UpdateDiagnosticDto!, id: ID!): DiagnosticDto
  deleteDiagnostic(id: ID!): DiagnosticDto
  createVisit(input: CreateVisit!): VisitDto
  updateVisit(input: UpdateVisit!, id: ID!): VisitDto
  deleteVisit(id: ID!): VisitDto
  signUp(input: CreateUserInput!): AuthSignUpDto!
  resetPassword(input: ResetPasswordInput!): AuthDto!
  createRetention(input: VisitRetentionInput!): VisitRetentionDto
  updateRetention(input: VisitRetentionUpdate!, id: ID!): VisitRetentionDto
  deleteRetention(id: ID!): VisitRetentionDto
  updateRetentionFromSummary(summary: String!, id: ID!): VisitRetentionDto
  syncRetention(eventId: String!, entityId: ID!): VisitRetentionDto
  createReview(input: ReviewInput!): ReviewDto
  updateReview(input: ReviewUpdate!, id: ID!): ReviewDto
  deleteReview(id: ID!): ReviewDto
  accreditReview(input: AccreditedInputType!, id: ID!): ReviewDto
  updateAccreditedReview(input: AccreditedUpdate!, id: ID!): ReviewDto
  createReviewSetting(input: ReviewSettingInput!): ReviewSettingDto
  deleteReviewSetting(id: ID!): ReviewSettingDto
  updateReviewSetting(input: ReviewSettingUpdate!, id: ID!): ReviewSettingDto
  createRetentionSetting(input: RetentionSettingInput!): RetentionSettingDto
  deleteRetentionSetting(id: ID!): RetentionSettingDto
  updateRetentionSetting(input: RetentionSettingUpdate!, id: ID!): RetentionSettingDto
  createServiceSetting(input: ServiceSettingInput!): ServiceSettingDto
  deleteServiceSetting(id: ID!): ServiceSettingDto
  updateServiceSetting(input: ServiceSettingUpdate!, id: ID!): ServiceSettingDto
  createColorSetting(input: ColorSettingInput!): ColorSettingDto
  deleteColorSetting(id: ID!): ColorSettingDto
  updateColorSetting(input: ColorSettingUpdate!, id: ID!): ColorSettingDto
}

input NoteInput {
  text: String!
  status: String!
  performedById: String!
}

type NoteType {
  id: String!
  text: String!
  status: String!
  performedById: String!
}

type PaginatedClientResponse {
  items: [ClientType!]!
  total: Int!
  hasMore: Boolean!
  otherInfo: [String!]!
}

type PaginatedColorSettingResponse {
  items: [ColorSettingDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedDiagnosticResponse {
  items: [DiagnosticDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedFacialFormResponse {
  items: [FacialFormType!]!
  total: Int!
  hasMore: Boolean!
  otherInfo: [String!]!
}

type PaginatedMassageFormResponse {
  items: [MassageFormType!]!
  total: Int!
  hasMore: Boolean!
  otherInfo: [String!]!
}

type PaginatedRetentionSettingResponse {
  items: [RetentionSettingDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedReviewResponse {
  items: [ReviewDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedReviewSettingResponse {
  items: [ReviewSettingDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedServiceSettingResponse {
  items: [ServiceSettingDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedUserResponse {
  items: [UserType!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedVisitResponse {
  items: [VisitDto!]!
  total: Int!
  hasMore: Boolean!
}

type PaginatedVisitRetentionResponse {
  items: [VisitRetentionDto!]!
  total: Int!
  hasMore: Boolean!
}

input ParentConsentInput {
  firstname: String
  lastname: String
  signature: String
}

type ParentConsentType {
  firstname: String
  lastname: String
  signature: String
}

type Query {
  client(id: ID!): ClientType
  clients(limit: Int, skip: Int): PaginatedClientResponse!
  filterClients(query: String = "", skip: Int = 0, limit: Int = 10): PaginatedClientResponse!
  user(id: ID!): UserType
  users(limit: Int, skip: Int): PaginatedUserResponse!
  filterUsers(limit: Int, skip: Int, filter: UserFilterInput): PaginatedUserResponse!
  getUserBalanceRetention(filter: UserFilterInput): UserBalanceRetentionDto!
  facial(id: ID!): FacialFormType
  facials(limit: Int, skip: Int): PaginatedFacialFormResponse!
  massage(id: ID!): MassageFormType
  massages(limit: Int, skip: Int): PaginatedMassageFormResponse!
  diagnostic(id: ID!): DiagnosticDto
  diagnostics(limit: Int, skip: Int): PaginatedDiagnosticResponse!
  visit(id: ID!): VisitDto
  visits(limit: Int, skip: Int): PaginatedVisitResponse!
  logIn(input: LoginInput!): AuthDto!
  userInfo: UserInfoDto!
  verifyToken: Boolean!
  getRetention(id: ID!): VisitRetentionDto
  getRetentions(limit: Int, skip: Int): PaginatedVisitRetentionResponse!
  filterRetentions(filter: RetentionFilterInput, skip: Int = 0, limit: Int = 10, withItems: Boolean = true): PaginatedVisitRetentionResponse!
  getPerformanceRetention(filter: RetentionFilterInput, skip: Int = 0, limit: Int = 10, withItems: Boolean = true): RetentionPerformanceDto!
  review(id: ID!): ReviewDto
  reviews(limit: Int, skip: Int): PaginatedReviewResponse!
  filterReviews(filter: ReviewFilterInput, skip: Int = 0, limit: Int = 10, sort: ReviewQuerySortInput): PaginatedReviewResponse!
  getReviewUsersBalance: [ReviewUserBalance!]!
  filterReviewsPerDirectory(filter: ReviewFilterInput, skip: Int = 0, limit: Int = 10, sort: ReviewQuerySortInput): [ReviewPerDirectoryDto!]!
  getReviewSetting(id: ID!): ReviewSettingDto
  getReviewSettings(limit: Int, skip: Int): PaginatedReviewSettingResponse!
  getReviewBalance(id: ID): [ReviewBalanceDto!]
  getRetentionSetting(id: ID!): RetentionSettingDto
  getRetentionSettings(limit: Int, skip: Int): PaginatedRetentionSettingResponse!
  getServiceSetting(id: ID!): ServiceSettingDto
  getServiceSettings(limit: Int, skip: Int): PaginatedServiceSettingResponse!
  getColorSetting(id: ID!): ColorSettingDto
  getColorSettings(limit: Int, skip: Int): PaginatedColorSettingResponse!
}

input QueryFilterBooleanDto {
  eq: Boolean
}

input QueryFilterDateDto {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
}

input QueryFilterExistsDto {
  exists: Boolean
}

input QueryFilterIdDto {
  eq: String
  in: [String!]
}

input QueryFilterNumberDto {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Int!]
}

input QueryFilterStringDto {
  eq: String
  in: [String!]
  regex: String
}

input RecommendedProductInput {
  daytime: String
  nightime: String
}

type RecommendedProductType {
  daytime: String
  nightime: String
}

input ResetPasswordInput {
  password: String!
}

type ResourceDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RetentionAmountOptionSettingDto {
  match: [String!]!
  type: String!
  display: String
}

input RetentionAmountOptionSettingInput {
  match: [String!]!
  type: String!
  display: String
}

input RetentionAmountOptionSettingUpdate {
  match: [String!]
  type: String
  display: String
}

type RetentionAmountSettingDto {
  default: String
  setting: [RetentionAmountOptionSettingDto!]!
}

input RetentionAmountSettingInput {
  default: String
  setting: [RetentionAmountOptionSettingInput!]!
}

input RetentionAmountSettingUpdate {
  default: String
  setting: [RetentionAmountOptionSettingUpdate!]
}

type RetentionAvailabilityOptionSettingDto {
  match: [String!]!
}

input RetentionAvailabilityOptionSettingInput {
  match: [String!]!
}

input RetentionAvailabilityOptionSettingUpdate {
  match: [String!]
}

type RetentionAvailabilitySettingDto {
  available: RetentionAvailabilityOptionSettingDto!
  unavailable: RetentionAvailabilityOptionSettingDto!
}

input RetentionAvailabilitySettingInput {
  available: RetentionAvailabilityOptionSettingInput!
  unavailable: RetentionAvailabilityOptionSettingInput!
}

input RetentionAvailabilitySettingUpdate {
  available: RetentionAvailabilityOptionSettingUpdate
  unavailable: RetentionAvailabilityOptionSettingUpdate
}

type RetentionDirectoryOptionSettingDto {
  directoryId: String!
  match: [String!]!
}

input RetentionDirectoryOptionSettingInput {
  directoryId: String!
  match: [String!]!
}

input RetentionDirectoryOptionSettingUpdate {
  directoryId: String
  match: [String!]
}

type RetentionDirectorySettingDto {
  default: String!
  setting: [RetentionDirectoryOptionSettingDto!]!
}

input RetentionDirectorySettingInput {
  default: String!
  setting: [RetentionDirectoryOptionSettingInput!]!
}

input RetentionDirectorySettingUpdate {
  default: String
  setting: [RetentionDirectoryOptionSettingUpdate!]
}

input RetentionFilterInput {
  search: String
  userId: QueryFilterIdDto
  directoryId: QueryFilterIdDto
  serviceId: QueryFilterIdDto
  date: QueryFilterDateDto
  flag: QueryFilterStringDto
}

type RetentionPerformanceDto {
  paginate: PaginatedVisitRetentionResponse
  personal: Float!
  request: Float!
  total: Float!
  performance: Float!
}

type RetentionRequestSettingDto {
  default: Boolean!
  personalMatch: [String!]!
  requestMatch: [String!]!
}

input RetentionRequestSettingInput {
  default: Boolean!
  personalMatch: [String!]!
  requestMatch: [String!]!
}

input RetentionRequestSettingUpdate {
  default: Boolean
  personalMatch: [String!]
  requestMatch: [String!]
}

type RetentionServiceMatchSetting {
  serviceId: String!
  match: [String!]!
}

input RetentionServiceMatchSettingInput {
  serviceId: String!
  match: [String!]!
}

input RetentionServiceMatchSettingUpdate {
  serviceId: String
  match: [String!]
}

type RetentionServiceSettingDto {
  setting: [RetentionServiceMatchSetting!]!
  default: String
}

input RetentionServiceSettingInput {
  setting: [RetentionServiceMatchSettingInput!]!
  default: String
}

input RetentionServiceSettingUpdate {
  setting: [RetentionServiceMatchSettingUpdate!]
  default: String
}

type RetentionSettingDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  treatment: RetentionTreatmentSettingDto!
  availability: RetentionAvailabilitySettingDto!
}

input RetentionSettingInput {
  treatment: RetentionTreatmentSettingInput!
  availability: RetentionAvailabilitySettingInput!
}

input RetentionSettingUpdate {
  treatment: RetentionTreatmentSettingUpdate
  availability: RetentionAvailabilitySettingUpdate
}

type RetentionTreatmentSettingDto {
  services: RetentionServiceSettingDto!
  request: RetentionRequestSettingDto!
  amount: RetentionAmountSettingDto!
  directory: RetentionDirectorySettingDto!
  tip: RetentionAmountSettingDto!
  otherInfo: [String!]
}

input RetentionTreatmentSettingInput {
  services: RetentionServiceSettingInput!
  request: RetentionRequestSettingInput!
  amount: RetentionAmountSettingInput!
  directory: RetentionDirectorySettingInput!
  tip: RetentionAmountSettingInput!
  otherInfo: [String!]!
}

input RetentionTreatmentSettingUpdate {
  services: RetentionServiceSettingUpdate
  request: RetentionRequestSettingUpdate
  amount: RetentionAmountSettingUpdate
  directory: RetentionDirectorySettingUpdate
  tip: RetentionAmountSettingUpdate
  otherInfo: [String!]
}

type RetentionUserDto {
  total: Float
  important: Float
}

input RetentionUserInput {
  total: Float
  important: Float
}

type ReviewBalanceDto {
  directory: ReviewSettingDto!
  achieved: Float!
  overall: Float!
  sumStars: Float!
  criticals: Float!
}

type ReviewDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: String!
  externalId: String
  embedHTML: String
  date: DateTime!
  text: String!
  stars: Float!
  directory: ReviewSettingDto
  accredited: AccreditedType
}

input ReviewFilterInput {
  search: String
  assignedTo: QueryFilterStringDto
  directoryId: QueryFilterStringDto
  date: QueryFilterDateDto
  critical: QueryFilterBooleanDto
  stars: QueryFilterNumberDto
  accredited: QueryFilterExistsDto
}

input ReviewInput {
  client: String!
  externalId: String
  embedHTML: String
  date: DateTime!
  text: String!
  stars: Float!
  directoryId: String!
  accredited: AccreditedInputType = null
}

type ReviewPerDirectoryDto {
  directoryId: String!
  paginate: PaginatedReviewResponse!
  overall: Float!
  sumStars: Float!
  totalStars: Float!
  criticals: Float!
}

input ReviewQuerySortInput {
  date: Int
  stars: Int
}

type ReviewSettingDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  directoryName: String!
  bonus: Float!
  payment: Float!
  percentage: Float!
  minOverall: Float!
  icon: String
  iconReview: String
  iconColored: String
}

input ReviewSettingInput {
  directoryName: String!
  bonus: Float
  payment: Float
  percentage: Float
  minOverall: Float
  icon: String
  iconReview: String
  iconColored: String
}

input ReviewSettingUpdate {
  directoryName: String
  bonus: Float
  payment: Float
  percentage: Float
  minOverall: Float
  icon: String
  iconReview: String
  iconColored: String
}

input ReviewUpdate {
  client: String
  date: DateTime
  text: String
  stars: Float
  directoryId: String
}

type ReviewUserBalance {
  userId: String!
  overall: Float!
  retention: Float!
  expectedReviews: Float!
  critics: Float!
}

input SearcheableFilterInput {
  search: String
}

type ServiceSettingDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  roles: [String!]!
}

input ServiceSettingInput {
  name: String!
  roles: [String!]
}

input ServiceSettingUpdate {
  name: String
  roles: [String!]
}

input UpdateClientInput {
  firstname: String
  lastname: String
  phone: String
  streetaddress: String
  city: String
  state: String
  zipcode: String
  email: String
  datebirth: DateTime
  imgSrc: String
  gender: String
}

input UpdateDiagnosticDto {
  date: DateTime
  typeOfKind: String
  fitzpatrickClassification: String
  conditionsAndConcerns: [String!]
  texture: String
  todaysDate: DateTime
  typeOfTreatment: String
  specificClientsConcerns: String
  notesOrRemarks: String
  productsUsedToday: [String!]
  extractions: Boolean
  steam: Boolean
  highFrecuency: Boolean
  todaysRecommendedProducts: RecommendedProductInput
}

input UpdateFacialFormInput {
  recommendation: String
  groupon: String
  business: String
  businessYelp: Boolean
  businessGoogle: Boolean
  businessGroupon: Boolean
  businessClasspass: Boolean
  businessFacebook: Boolean
  businessRecommendation: Boolean
  wearcontact: Boolean
  surgery: Boolean
  surgerydescribe: String
  skincancer: Boolean
  dermatitis: Boolean
  keloidscarring: Boolean
  acne: Boolean
  rosacea: Boolean
  broken: Boolean
  treatment: Boolean
  hypo: Boolean
  hyperpig: Boolean
  burns: Boolean
  anycondition: Boolean
  anyconditiondescription: String
  allergies: Boolean
  latexallergies: Boolean
  otherallergies: Boolean
  otherallergiesdescription: String
  prescription: Boolean
  prescriptiondescription: String
  pregnant: Boolean
  technician: Boolean
  techniciandescription: String
  appointment: String
  oftenfacials: String
  oftenbody: String
  cosmetic: Boolean
  finelines: Boolean
  wrinkles: Boolean
  dull: Boolean
  loss: Boolean
  dry: Boolean
  oily: Boolean
  pores: Boolean
  redness: Boolean
  sensit: Boolean
  dark: Boolean
  pimples: Boolean
  skin: Boolean
  other: Boolean
  otherextradescription: String
  routine: String
  cleanser: Boolean
  toner: Boolean
  moisturizer: Boolean
  spf: Boolean
  vitamin: Boolean
  scrubs: Boolean
  speciality: Boolean
  mask: Boolean
  supplements: Boolean
  exercise: Boolean
  scar: Boolean
  skinsensitive: Boolean
  pictures: Boolean
  consent: Float
  signature: String
  parentsConsent: UpdateParentConsentInput
}

input UpdateMassageFormInput {
  occupation: String
  emergencyname: String
  emergencyphone: String
  havepro: Boolean
  howofter: String
  difficulty: Boolean
  qtTwoExplain: String
  allergies: Boolean
  qtThreeExplain: String
  sensitive: Boolean
  contactlenses: Boolean
  dentures: Boolean
  hearing: Boolean
  workstation: Boolean
  qtSixExplain: String
  repetitive: Boolean
  qtSevenExplain: String
  experience: Boolean
  muscle: Boolean
  anxiety: Boolean
  insomnia: Boolean
  irritability: Boolean
  other: String
  particular: Boolean
  qtNigthExplain: String
  goals: Boolean
  qtTenExplain: String
  arms: Boolean
  legs: Boolean
  feet: Boolean
  shoulder: Boolean
  hip: Boolean
  uperback: Boolean
  lowerback: Boolean
  calves: Boolean
  medical: Boolean
  qtElevenExplain: String
  chiropractor: Boolean
  qtTweleExplain: String
  medication: Boolean
  qtTreceExplain: String
  contContagious: Boolean
  contSores: Boolean
  contBruising: Boolean
  accident: Boolean
  fracture: Boolean
  surgery: Boolean
  artificial: Boolean
  sprains: Boolean
  fever: Boolean
  swollen: Boolean
  sensitivity: Boolean
  heart: Boolean
  blood: Boolean
  circulatory: Boolean
  varicose: Boolean
  rheumatoid: Boolean
  atherosclerosis: Boolean
  phlebitis: Boolean
  thrombosis: Boolean
  osteoporosis: Boolean
  epilepsy: Boolean
  migraines: Boolean
  cancer: Boolean
  diabetes: Boolean
  sensation: Boolean
  neck: Boolean
  fibromyalgia: Boolean
  tmj: Boolean
  carpal: Boolean
  tennis: Boolean
  pregnancy: Boolean
  manymonth: String
  conditionexplain: String
  anything: String
  signature: String
  datecreated: DateTime
  dateinitial: String
  parentsConsent: UpdateParentConsentInput
}

input UpdateParentConsentInput {
  firstname: String
  lastname: String
  signature: String
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  password: String
  phone: String
  imgSrc: String
  streetAddress: String
  city: String
  state: String
  zipCode: String
  dateOfBirth: DateTime
  gender: String
  status: String
  roles: [String!]
  retention: RetentionUserInput
  colorId: String
}

input UpdateVisit {
  date: DateTime
  photos: [String!]
  diagnosticId: String
  formId: String
}

type UserBalanceRetentionDto {
  total: Float!
  important: Float!
  percentageRetention: Float!
}

input UserFilterInput {
  search: String
  email: QueryFilterStringDto
  firstName: QueryFilterStringDto
  lastName: QueryFilterStringDto
  phone: QueryFilterStringDto
  streetAddress: QueryFilterStringDto
  city: QueryFilterStringDto
  state: QueryFilterStringDto
  zipCode: QueryFilterStringDto
  dateOfBirth: QueryFilterStringDto
  gender: QueryFilterStringDto
  status: QueryFilterStringDto
  id: QueryFilterIdDto
  colorId: QueryFilterIdDto
}

type UserInfoDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  status: String!
  imgSrc: String!
  phone: String!
  roles: [String!]!
  colorId: String
}

type UserType implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  status: String!
  phone: String!
  imgSrc: String!
  streetAddress: String!
  city: String!
  state: String!
  zipCode: String!
  dateOfBirth: DateTime!
  gender: String!
  roles: [String!]!
  retention: RetentionUserDto!
  colorId: String
  color: ColorSettingDto
}

type VisitDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  client: ClientType
  performedBy: UserType
  date: DateTime
  photos: [String!]
  notes: [NoteType!]
  diagnostic: DiagnosticDto
  facialForm: FacialFormType
  massageForm: MassageFormType
}

type VisitRetentionDto implements IResourceDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: UserInfoDto
  date: DateTime!
  flag: String!
  directoryId: String!
  directory: ReviewSettingDto
  serviceId: String
  service: ServiceSettingDto
  client: ClientRetentionDto!
  amount: String
  tip: String
  calendarId: String
  otherInfo: [String!]
}

input VisitRetentionInput {
  userId: String!
  date: DateTime!
  flag: String!
  directoryId: String!
  serviceId: String
  client: ClientRetentionInput!
  amount: String
  tip: String
  calendarId: String
  otherInfo: [String!]
}

input VisitRetentionUpdate {
  userId: String
  date: DateTime
  flag: String
  directoryId: String
  serviceId: String
  client: ClientRetentionUpdate
  amount: String
  tip: String
  otherInfo: [String!]
}
